# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_mtm_elections')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_mtm_elections')
    _mtm_elections = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mtm_elections', [dirname(__file__)])
        except ImportError:
            import _mtm_elections
            return _mtm_elections
        try:
            _mod = imp.load_module('_mtm_elections', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _mtm_elections = swig_import_helper()
    del swig_import_helper
else:
    import _mtm_elections
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

MTM_ELECTIONS_MEMORY_ERROR = _mtm_elections.MTM_ELECTIONS_MEMORY_ERROR
MTM_ELECTIONS_NULL_ARGUMENT = _mtm_elections.MTM_ELECTIONS_NULL_ARGUMENT
MTM_ELECTIONS_ILLEGAL_ID = _mtm_elections.MTM_ELECTIONS_ILLEGAL_ID
MTM_ELECTIONS_ILLEGAL_AGE = _mtm_elections.MTM_ELECTIONS_ILLEGAL_AGE
MTM_ELECTIONS_ILLEGAL_PRIORITY = _mtm_elections.MTM_ELECTIONS_ILLEGAL_PRIORITY
MTM_ELECTIONS_ILLEGAL_NUMBER_OF_YEARS = _mtm_elections.MTM_ELECTIONS_ILLEGAL_NUMBER_OF_YEARS
MTM_ELECTIONS_CITIZEN_ALREADY_EXISTS = _mtm_elections.MTM_ELECTIONS_CITIZEN_ALREADY_EXISTS
MTM_ELECTIONS_CITIZEN_DOES_NOT_EXIST = _mtm_elections.MTM_ELECTIONS_CITIZEN_DOES_NOT_EXIST
MTM_ELECTIONS_CANDIDATE_ALREADY_EXISTS = _mtm_elections.MTM_ELECTIONS_CANDIDATE_ALREADY_EXISTS
MTM_ELECTIONS_CANDIDATE_DOES_NOT_EXIST = _mtm_elections.MTM_ELECTIONS_CANDIDATE_DOES_NOT_EXIST
MTM_ELECTIONS_CITY_ALREADY_EXISTS = _mtm_elections.MTM_ELECTIONS_CITY_ALREADY_EXISTS
MTM_ELECTIONS_CITY_DOES_NOT_EXIST = _mtm_elections.MTM_ELECTIONS_CITY_DOES_NOT_EXIST
MTM_ELECTIONS_NOT_SAME_CITY = _mtm_elections.MTM_ELECTIONS_NOT_SAME_CITY
MTM_ELECTIONS_ALREADY_SUPPORTED = _mtm_elections.MTM_ELECTIONS_ALREADY_SUPPORTED
MTM_ELECTIONS_NOT_SUPPORTED = _mtm_elections.MTM_ELECTIONS_NOT_SUPPORTED
MTM_ELECTIONS_CAN_NOT_SUPPORT = _mtm_elections.MTM_ELECTIONS_CAN_NOT_SUPPORT
MTM_ELECTIONS_MUST_SUPPORT = _mtm_elections.MTM_ELECTIONS_MUST_SUPPORT
MTM_ELECTIONS_AGE_NOT_APPROPRIATE = _mtm_elections.MTM_ELECTIONS_AGE_NOT_APPROPRIATE
MTM_ELECTIONS_PRIORITY_EXISTS = _mtm_elections.MTM_ELECTIONS_PRIORITY_EXISTS
MTM_ELECTIONS_NO_CANDIDATES_IN_CITY = _mtm_elections.MTM_ELECTIONS_NO_CANDIDATES_IN_CITY
MTM_ELECTIONS_FILE_ERROR = _mtm_elections.MTM_ELECTIONS_FILE_ERROR
MTM_ELECTIONS_SUCCESS = _mtm_elections.MTM_ELECTIONS_SUCCESS

def mtmElectionsCreate(mtmElections):
    return _mtm_elections.mtmElectionsCreate(mtmElections)
mtmElectionsCreate = _mtm_elections.mtmElectionsCreate

def mtmElectionsAddCity(mtmElections, citizenId, cityId):
    return _mtm_elections.mtmElectionsAddCity(mtmElections, citizenId, cityId)
mtmElectionsAddCity = _mtm_elections.mtmElectionsAddCity

def mtmElectionsAddCitizen(mtmElections, citizenName, citizenId, citizenAge, yearsOfEducation, cityId):
    return _mtm_elections.mtmElectionsAddCitizen(mtmElections, citizenName, citizenId, citizenAge, yearsOfEducation, cityId)
mtmElectionsAddCitizen = _mtm_elections.mtmElectionsAddCitizen

def mtmElectionsAddCandidate(mtmElections, candidateId, cityId):
    return _mtm_elections.mtmElectionsAddCandidate(mtmElections, candidateId, cityId)
mtmElectionsAddCandidate = _mtm_elections.mtmElectionsAddCandidate

def mtmElectionsSupportCandidate(mtmElections, citizenId, candidateId, priority):
    return _mtm_elections.mtmElectionsSupportCandidate(mtmElections, citizenId, candidateId, priority)
mtmElectionsSupportCandidate = _mtm_elections.mtmElectionsSupportCandidate

def mtmElectionsDestroy(mtmElections):
    return _mtm_elections.mtmElectionsDestroy(mtmElections)
mtmElectionsDestroy = _mtm_elections.mtmElectionsDestroy

def mtmElectionsPerformElections(mtmElections, rank, auxilaryData, filename):
    return _mtm_elections.mtmElectionsPerformElections(mtmElections, rank, auxilaryData, filename)
mtmElectionsPerformElections = _mtm_elections.mtmElectionsPerformElections

def mtmElectionsMayorOfCity(*args):
    return _mtm_elections.mtmElectionsMayorOfCity(*args)
mtmElectionsMayorOfCity = _mtm_elections.mtmElectionsMayorOfCity
# This file is compatible with both classic and new-style classes.


